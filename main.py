import streamlit as st
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.multioutput import MultiOutputRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, r2_score
from scipy.optimize import minimize
import folium
from streamlit_folium import st_folium

st.set_page_config(page_title="Smart Layout AI", page_icon="üìáÔ∏è", layout="centered")

st.markdown("""
    <style>
    html, body, [class*="css"]  {
        font-family: 'Segoe UI', sans-serif;
        background-color: #f0f4f8;
    }
    .stButton>button {
        background: linear-gradient(to right, #0f4c75, #3282b8);
        color: white;
        font-size: 18px;
        border-radius: 10px;
        padding: 0.6em 2em;
    }
    div[data-testid="metric-container"] {
        background-color: white;
        border-radius: 12px;
        padding: 1em;
        margin: 10px 0;
        box-shadow: 0px 4px 12px rgba(0,0,0,0.08);
    }
    div[data-testid="metric-container"] > label, div[data-testid="metric-container"] > div {
        color: #1f2937 !important;
        font-weight: 600;
        font-size: 18px;
    }
    </style>
""", unsafe_allow_html=True)

df = pd.read_excel("datalayout.xlsx")
df.columns = df.columns.str.strip()

# ‡πÅ‡∏™‡∏î‡∏á Map ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
st.markdown("## üó∫Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà")
m = folium.Map(location=[13.736717, 100.523186], zoom_start=6)
marker_data = []

for i, row in df.iterrows():
    if pd.notna(row.get("lat")) and pd.notna(row.get("lon")):
        popup = f"{row['‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£']} ({row['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î']}, {row['‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£']})"
        folium.Marker([row['lat'], row['lon']], popup=popup).add_to(m)
        marker_data.append((row['‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'], row['lat'], row['lon']))

selected = st_folium(m, width=700, height=450)

if selected and selected['last_clicked']:
    lat_clicked = selected['last_clicked']['lat']
    lon_clicked = selected['last_clicked']['lng']
    st.success(f"‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏Å‡∏•‡πâ: lat={lat_clicked:.4f}, lon={lon_clicked:.4f}")
    
    # ‡∏´‡∏≤‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    df['‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á'] = ((df['lat'] - lat_clicked)**2 + (df['lon'] - lon_clicked)**2)**0.5
    nearest = df.sort_values('‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á').iloc[0]
    st.info(f"‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {nearest['‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£']} ({nearest['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î']}, {nearest['‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£']})")

    # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• nearest ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î input prediction ‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô:
    # ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î = nearest['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î']
    # ‡πÄ‡∏Å‡∏£‡∏î = nearest['‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£']
    # ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á = nearest['‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô']
    # ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏ï‡πà‡∏≠‡πÉ‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ
else:
    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠")

# ====== FORM ======
st.markdown("## üìã ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
with st.form("input_form"):
    col1, col2 = st.columns(2)
    with col1:
        ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î = st.selectbox("üìç ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", sorted(df['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'].dropna().unique()))
        ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á = st.selectbox("üß±Ô∏è ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô", sorted(df['‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô'].dropna().unique()))
    with col2:
        ‡πÄ‡∏Å‡∏£‡∏î = st.selectbox("üèß ‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", sorted(df['‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'].dropna().unique()))
        ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà_‡∏ß‡∏≤ = st.number_input("üìÄ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≤)", min_value=250, value=7500, step=100)
    submitted = st.form_submit_button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")

# ====== PREDICT ======
if submitted:
    area = ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà_‡∏ß‡∏≤ * 4
    rai = area / 1600
    input_df = pd.DataFrame([{ '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î': ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î, '‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£': ‡πÄ‡∏Å‡∏£‡∏î, '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)': area, '‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô': ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á }])
    encoded = pd.get_dummies(input_df)
    for col in X.columns:
        if col not in encoded.columns:
            encoded[col] = 0
    encoded = encoded[X.columns]
    pred = model.predict(encoded)[0]

    ‡∏û‡∏ó_‡∏™‡∏≤‡∏ò‡∏≤ = pred[0] * area
    ‡∏û‡∏ó_‡∏Ç‡∏≤‡∏¢ = pred[1] * area
    ‡∏û‡∏ó_‡∏™‡∏ß‡∏ô = pred[2] * area
    ‡∏û‡∏ó_‡∏ñ‡∏ô‡∏ô = ‡∏û‡∏ó_‡∏™‡∏≤‡∏ò‡∏≤ * ‡∏ñ‡∏ô‡∏ô_‡∏ï‡πà‡∏≠_‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞_‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏î‡∏µ‡∏ï
    ‡∏´‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏° = pred[3] * rai

    ratio_hist = get_ratio_from_lookup(‡πÄ‡∏Å‡∏£‡∏î, area)
    if ratio_hist:
        ‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°, ‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î, ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß, ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå = [‡∏´‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏° * r for r in ratio_hist]
    else:
        total = sum(pred[4:8]) or 1
        raw_ratios = [r / total for r in pred[4:8]]
        raw_ratios = adjust_by_grade_policy(‡πÄ‡∏Å‡∏£‡∏î, raw_ratios)
        ‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°, ‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î, ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß, ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå = [‡∏´‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏° * r for r in raw_ratios]

    ‡∏ã‡∏≠‡∏¢ = ‡∏´‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏° / avg_‡∏ã‡∏≠‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏±‡∏á.get(‡πÄ‡∏Å‡∏£‡∏î, 12)

    st.markdown("---")
    st.markdown("## üåü ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞", f"{‡∏û‡∏ó_‡∏™‡∏≤‡∏ò‡∏≤ / 4:,.0f} ‡∏ï‡∏£.‡∏ß‡∏≤")
        st.metric("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢", f"{‡∏û‡∏ó_‡∏Ç‡∏≤‡∏¢ / 4:,.0f} ‡∏ï‡∏£.‡∏ß‡∏≤")
        st.metric("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô", f"{‡∏û‡∏ó_‡∏™‡∏ß‡∏ô / 4:,.0f} ‡∏ï‡∏£.‡∏ß‡∏≤")
        st.metric("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô", f"{‡∏û‡∏ó_‡∏ñ‡∏ô‡∏ô / 4:,.0f} ‡∏ï‡∏£.‡∏ß‡∏≤")
    with col2:
        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏ß‡∏°", f"{‡∏´‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏°:,.0f} ‡∏´‡∏•‡∏±‡∏á")
        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢", f"{‡∏ã‡∏≠‡∏¢:,.0f} ‡∏ã‡∏≠‡∏¢")

    st.markdown("### üè° ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡πâ‡∏≤‡∏ô")
    st.markdown(f"""
        - ‡∏ó‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏Æ‡∏°: **{‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°:,.0f}** ‡∏´‡∏•‡∏±‡∏á  
        - ‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î: **{‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î:,.0f}** ‡∏´‡∏•‡∏±‡∏á  
        - ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß: **{‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß:,.0f}** ‡∏´‡∏•‡∏±‡∏á  
        - ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå: **{‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå:,.0f}** ‡∏´‡∏•‡∏±‡∏á  
    """)

    y_pred = model.predict(X_train)
    mae = mean_absolute_error(y_train, y_pred)
    r2 = r2_score(y_train, y_pred)
    st.markdown("### üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• (Train Set)")
    st.write(f"**MAE (Mean Absolute Error):** {mae:.4f}")
    st.write(f"**R¬≤ Score:** {r2:.4f}")

st.markdown("---")
st.caption("Developed by mmethaa | Smart Layout AI üöÄ")
